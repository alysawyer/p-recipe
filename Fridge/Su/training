# Set up CUDA in OS
import os
os.environ['CUDA_LAUNCH_BLOCKING'] = '1'
# Import libraries
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import numpy as np
import seaborn as sn 
import pandas as pd
import torchvision
from torchvision import *
from torch.utils.data import Dataset, DataLoader
from torchvision.io import read_image
import torchvision.transforms as T
from torchvision import datasets, models, transforms
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

import matplotlib.pyplot as plt
import time
import copy
from matplotlib import image as mpimg
import time
import copy
from PIL import Image

import locale

# Set the locale to en_US
locale.setlocale(locale.LC_ALL, 'en_US')

# Ignore warnings
import warnings
warnings.filterwarnings("ignore")

device = "cuda" if torch.cuda.is_available() else "cpu"

#all the possible labels from the dataset
names = ["Apple", 'Banana', 'Beans', 'Capsicum', 'Carrot', 'Cucumber', 'Curli-Flower', 'Orange', 'Tomato', 'Tomatos', 'apple', 'asparagus', 'avocado', 'banana', 'beef', 'bell_pepper', 'bento', 'blueberries', 'bottle', 'bread', 'broccoli', 'butter', 'can', 'carrot', 'cauliflower', 'cheese', 'chicken', 'chicken_breast', 'chocolate', 'coffee', 'corn', 'cucumber', 'egg', 'eggs', 'energy_drink', 'fish', 'flour', 'garlic', 'goat_cheese', 'grapes', 'grated_cheese', 'green_beans', 'ground_beef', 'guacamole', 'ham', 'heavy_cream', 'humus', 'juice', 'ketchup', 'kothmari', 'leek', 'lemon', 'lettuce', 'lime', 'mango', 'marmelade', 'mayonaise', 'milk', 'mushrooms', 'mustard', 'nuts', 'onion', 'orange', 'pak_choi', 'parsley', 'peach', 'pear', 'pineapple', 'plasticsaveholder', 'pot', 'potato', 'potatoes', 'pudding', 'red_cabbage', 'red_grapes', 'rice_ball', 'salad', 'sandwich', 'sausage', 'shrimp', 'smoothie', 'spinach', 'spring_onion', 'strawberries', 'sugar', 'sweet_potato', 'tea_a', 'tea_i', 'tomato', 'tomato_sauce', 'tortillas', 'turkey', 'watermelon', 'yogurt']

# original paths from our data
train_images = "/Users/bengisubulur/Desktop/Food-Item-Detection.v1i.yolov7pytorch/train/images"
train_labels = "/Users/bengisubulur/Desktop/Food-Item-Detection.v1i.yolov7pytorch/train/labels"
test_images = "/Users/bengisubulur/Desktop/Food-Item-Detection.v1i.yolov7pytorch/test/images"
test_labels = "/Users/bengisubulur/Desktop/Food-Item-Detection.v1i.yolov7pytorch/test/labels"
valid_images = "/Users/bengisubulur/Desktop/Food-Item-Detection.v1i.yolov7pytorch/valid/images"
valid_labels = "/Users/bengisubulur/Desktop/Food-Item-Detection.v1i.yolov7pytorch/valid/labels"


#now putting all the images together with the corresponding labels!
#crop every image so that we have only one label per image, save the cropped images in another file, trainin will be done on that new file
def show_labels(label_file_path, image_file_path, category_values_list, image_number):
    """ This function takes the locations of an image and its corresponding label file and it shows cropped versions of the image that only show the labels.
    label_file_path: (String) This paramater is the pathname of the label file that corresponds to the image.
    image_file_path: (String) This parameter is the pathname of the image file that we will be cropping.
    category_values_list: (List of strings) This parameter is a list which contains all of the possible names of the labels in the same order that they were encoded by the dataset's creator.
    """
    print(label_file_path)
    print(image_file_path)
    print(image_number)

    im = Image.open(image_file_path) 
    width, height = im.size

    try: 
        with open(label_file_path, 'r') as file:
            lines = file.readlines()


        # Here I am deciphering each of the YOLO labels in this one picture and making lists to store their values
        class_id_list = []
        center_x_list = []
        center_y_list = []
        label_width_list = []
        label_height_list = []
        left_multiplier_list = []
        right_multiplier_list = []
        top_multiplier_list = []
        bottom_multiplier_list = []

        item_number = 0

        for line in lines:
            item_number += 1
            parts = line.strip().split()  # Split the line into parts



            # These are the characteristics of each of the labels
            class_id = int(parts[0])
            center_x = float(parts[1])
            center_y = float(parts[2])
            label_width = float(parts[3])
            label_height = float(parts[4])
            left_multiplier = center_x - (label_width / 2)
            right_multiplier = center_x + (label_width / 2)
            top_multiplier = center_y + (label_height / 2)
            bottom_multiplier = center_y - (label_height / 2)

        # Now I am adding each of these values to the lists I created
            class_id_list.append(class_id)
            center_x_list.append(center_x)
            center_y_list.append(center_y)
            label_width_list.append(label_width)
            label_height_list.append(label_height)
            left_multiplier_list.append(left_multiplier)
            right_multiplier_list.append(right_multiplier)
            top_multiplier_list.append(top_multiplier)
            bottom_multiplier_list.append(bottom_multiplier)
            


            # Process the extracted information 
            print(f"Class ID: {class_id}, Center X: {center_x}, Center Y: {center_y}, Width: {label_width}, Height: {label_height}")

            # I'm not sure why the bottom_bound is bigger than the top_bound, but I think it might be because it's being measured from the top? I might need to rename my variables.
            # In these lines I am multiplying the Yolo float values which are between 0 and 1 by the width and height of the original picture so that I get the locations of the pixels.
            print("This is a " + str(category_values_list[class_id]))
            left_bound = round(left_multiplier * width)
            print("The left bound is " + str(left_bound))
            right_bound = round(right_multiplier * width)
            print("The right bound is " + str(right_bound))
            top_bound = round(bottom_multiplier * height)
            print("The top bound is " + str(top_bound))
            bottom_bound = round(top_multiplier * height)
            print("The bottom bound is " + str(bottom_bound))

            # These lines display the items that are labeled!
            try:
                im1 = im.crop((left_bound, top_bound, right_bound, bottom_bound))
                #im1.show()
                print("right before save")
                im1.save("/Users/bengisubulur/Desktop/Our_Data/train" + str(category_values_list[class_id]) + "/" + str(category_values_list[class_id]) + str(image_number) +"." + str(item_number) + ".jpg")
                print("right after save")
            except: 
                print(f"The file at '{images_pathname_list[i]}' is not a valid image file.")
    except: 
        print("Can't read file lines of " + label_file_path)


images_pathname_list = []
labels_pathname_list = []


def make_cropped_pictures_folder(folder_path):
    pathname_list = []
    images_folder_path = folder_path + "/images"
    labels_folder_path = folder_path + "/labels"

    images_path_list = sorted(os.listdir(images_folder_path))
    labels_path_list = sorted(os.listdir(labels_folder_path))
    #for i in range(len(os.listdir(images_folder_path))):
    for i in range(len(images_path_list)):

        print(str(images_path_list[i])[0:-3])
        print(str(labels_path_list[i])[0:-3])
        if images_path_list[i][0:(-3)] == labels_path_list[i][0:(-3)]:
        # if os.listdir(folder_path)[1][i][0:(-3)] == os.listdir(folder_path)[2][i][0:(-3)]:

            image_path = (images_folder_path + "/" + images_path_list[i])
            label_path = (labels_folder_path + "/" + labels_path_list[i])

            pathname_list.append((image_path, label_path, i))
    
    for i in range(100):
        print(pathname_list[i][0])
        print(pathname_list[i][1])
        print(pathname_list[i][2])
        show_labels(pathname_list[i][1], pathname_list[i][0], names, pathname_list[i][2])

make_cropped_pictures_folder("/Users/bengisubulur/Desktop/Food-Item-Detection.v1i.yolov7pytorch/train")